// api/generate-name.js
import dotenv from "dotenv";
import fetch from "node-fetch";
import { HttpsProxyAgent } from "https-proxy-agent";

dotenv.config();

// –ü—Ä–æ–∫—Å–∏ Psiphon (–ª–æ–∫–∞–ª—å–Ω—ã–π)
const proxyAgent = new HttpsProxyAgent("http://127.0.0.1:8080");

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" });
  }

  try {
    const { keyword } = req.body;
    if (!keyword || typeof keyword !== "string" || !keyword.trim()) {
      return res.status(400).json({ error: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω keyword" });
    }
    const prompt = keyword.trim();

    console.log("üì° –ó–∞–ø—Ä–æ—Å –∫ OpenRouter —á–µ—Ä–µ–∑ Psiphon-–ø—Ä–æ–∫—Å–∏...");

    const response = await fetch(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
        },
        agent: proxyAgent,
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content:
                "–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –±—Ä–µ–Ω–¥–∞.",
            },
            {
              role: "user",
              content: `${prompt}. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è –≤ JSON-–º–∞—Å—Å–∏–≤–µ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`,
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      const text = await response.text();
      return res.status(response.status).json({
        error: `–û—à–∏–±–∫–∞ OpenRouter: ${response.status} ${text}`,
      });
    }

    const data = await response.json();

    let result;
    try {
      // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –æ–∂–∏–¥–∞–µ–º JSON-–º–∞—Å—Å–∏–≤
      result = JSON.parse(data.choices[0].message.content.trim());
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ OpenRouter:", err);
      return res
        .status(500)
        .json({ error: "–û—Ç–≤–µ—Ç OpenRouter –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON" });
    }

    // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π
    return res.status(200).json({ names: result });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è:", error);
    return res
      .status(500)
      .json({ error: error.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
}
