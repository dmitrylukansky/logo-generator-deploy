// test-openai-proxy.js
import "dotenv/config";
import OpenAI from "openai";
import { HttpsProxyAgent } from "https-proxy-agent";
import fetch from "node-fetch";

// –ê–¥—Ä–µ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ Psiphon
const proxyUrl = "http://127.0.0.1:8080";
const httpsAgent = new HttpsProxyAgent(proxyUrl);

async function testOpenAI() {
  if (!process.env.OPENAI_API_KEY) {
    console.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏ –µ–≥–æ –≤ .env");
    process.exit(1);
  }

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  try {
    const res = await fetch("https://api.ipify.org?format=json", {
      agent: httpsAgent,
    });
    const data = await res.json();
    console.log("üåê IP —á–µ—Ä–µ–∑ HTTP-–ø—Ä–æ–∫—Å–∏ Psiphon:", data.ip);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:", err.message);
    return;
  }

  // 2. –ó–∞–ø—Ä–æ—Å –∫ OpenAI
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
    httpAgent: httpsAgent, // –î–ª—è HTTP
    httpsAgent: httpsAgent, // –î–ª—è HTTPS
  });

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: '–°–∫–∞–∂–∏ "–ü—Ä–∏–≤–µ—Ç" –∏ —É–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É, –≥–¥–µ —Ç—ã –¥—É–º–∞–µ—à—å —è –Ω–∞—Ö–æ–∂—É—Å—å',
        },
      ],
      max_tokens: 20,
    });

    console.log(
      "‚úÖ –û—Ç–≤–µ—Ç OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:",
      completion.choices[0].message.content
    );
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:", err.message);
  }
}

testOpenAI();
